/*
    INSERT INTO <TABLE_NAME>(COL1,COL2,...)
    VALUES(VAL1,VAL2,...)
*/

SELECT * FROM EMP;
INSERT INTO EMP VALUES(7701,'JW KANG','MANAGER',7839,TO_DATE('2023-01-01','YYYY/MM/DD'),3000,NULL,50);

INSERT INTO DEPT VALUES(50,'SECURITY','SEOUL');
INSERT INTO EMP(JOB,ENAME,SAL,EMPNO) VALUES('CLERK','RONALDO',100,7702);

/*
    SELECT COL1,COL2,...
    FROM <TABLE_NAME>;
*/
SELECT EMPNO,JOB,MGR,ENAME,SAL,COMM FROM EMP;

SELECT * FROM EMP;
/* 오라클에서 사용하는 DISTINCT 는 중복된 것은 제외하고 1개만 나오도록 처리해줌*/
SELECT DISTINCT JOB FROM EMP;


SELECT * FROM EMP WHERE JOB != 'CLERK';
-- = > < <= >=      같지않다 : <> 또는 != /// BETWEEN LIKE IN
-- WHERE 뒤에 조건이 여러가지가 들어갈 경우에 쓰는 것이 AND OR NOT
SELECT * FROM EMP WHERE JOB = 'CLERK';

SELECT * FROM EMP WHERE NOT JOB = 'CLERK' AND SAL>=3000;
SELECT * FROM EMP WHERE JOB = 'CLERK' OR JOB='MANAGER' AND SAL>= 3000;

SELECT * FROM EMP WHERE JOB = 'CLERK' AND SAL>= 1000 OR NOT JOB='MANAGER' AND SAL>= 3000;

/*
    ORDER BY COL1, COL2 ASC|DESC
*/

SELECT * FROM EMP ORDER BY EMPNO ASC;
SELECT * FROM EMP ORDER BY EMPNO DESC;
SELECT DISTINCT JOB FROM EMP ORDER BY JOB ASC;
SELECT * FROM EMP ORDER BY JOB DESC, ENAME DESC;

SELECT * FROM EMP WHERE SAL BETWEEN 1300 AND 3000;

SELECT * FROM EMP WHERE JOB IN('CLERK','MANAGER');
SELECT * FROM EMP WHERE SAL<1500;
SELECT * FROM EMP WHERE ENAME IN(SELECT ENAME FROM EMP WHERE SAL<1500);

--LIKE
--A%, _, %A%, _A% 
SELECT ENAME FROM EMP WHERE ENAME LIKE '%A%';

/*
    UPDATE <TABLE_NAME> SET COL1=VAL1, COL2=VAL2,... WHERE CONDITION;
*/

UPDATE EMP SET JOB='MANAGER', SAL=NULL WHERE EMPNO=7702;

SELECT * FROM EMP WHERE EMPNO=7702;

SELECT * FROM EMP WHERE EMPNO = 7701;

UPDATE EMP SET COMM='100' WHERE EMPNO=7701;

DELETE FROM EMP WHERE EMPNO = 7702;

SELECT * FROM EMP;

/*계산함수
    MIN() MAX() COUNT() AVG() SUM()
  별칭 별명(Aliases)
*/
SELECT COUNT(*) FROM EMP WHERE SAL>=3000;
SELECT COUNT(*) AS 개수 FROM EMP WHERE SAL>=3000; --AS를 통해서 별칭을 붙여줌(AS는 생략 가능)

SELECT ENAME FROM EMP; --SELECT EMP.ENAME FROM SCOTT.EMP;을 축약
SELECT E.ENAME 이름 FROM EMP E; --E라는 별칭을 붙여줌
SELECT MAX(SAL) MAX,MIN(SAL) MIN FROM EMP;

SELECT AVG(SAL) 이것은평균값이다 FROM EMP;
SELECT SUM(SAL) 이것은합계이다 FROM EMP;
/* GROUP BY
   SELECT 구문에 섞어 사용
   SELECT COLS(COUNT MAX MIN SUM AVG)
   FROM <TABLE_NAME>
   WHERE CONDITION
   GROUP BY <COLS>
   HAVING CONDITION
   ORDER BY <COLS>;
*/
SELECT JOB, COUNT(*), MAX(SAL), MIN(SAL),AVG(SAL),SUM(SAL) FROM EMP GROUP BY JOB
HAVING MIN(SAL)>1000;

SELECT JOB, COUNT(*), MAX(SAL), MIN(SAL),AVG(SAL),SUM(SAL) FROM EMP GROUP BY JOB
HAVING MAX(COMM) IS NULL ORDER BY JOB;

/*CASE*/
SELECT ENAME,DEPTNO,COMM,SAL
        ,CASE
            WHEN SAL>2000 THEN '고연봉자'
            WHEN SAL>=1000 THEN '평균연봉자'
            ELSE '저연봉자'
        END STATE
        FROM EMP;
        
SELECT ENAME, SAL FROM EMP
WHERE JOB=(CASE
                    WHEN SAL<1000 THEN 'CLERK'
                    WHEN SAL>2000 THEN 'MANAGER'
                    ELSE 'BOSS'
                    END);
                    
/*NULL FUNCTION
        DB NVL() COALESCE()
*/

SELECT ENAME,SAL,COMM
        ,SAL+NVL(COMM,0) AS PAY
        ,SAL+COALESCE(COMM,0) AS PAY2
FROM EMP;

--=================================
SELECT DEPTNO, JOB,COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;

SELECT DEPTNO, JOB,COUNT(*),MAX(SAL),SUM(SAL),AVG(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

SELECT DEPTNO, JOB, COUNT(*), MAX(SAL),SUM(SAL),AVG(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO,JOB)
ORDER BY DEPTNO,JOB;

--===========
SELECT NVL(TO_CHAR(DEPTNO),'부서없음') 부서코드,
        NVL(TRUNC(AVG(SAL),2),0)평균연봉, 
        NVL(MAX(SAL),0) 최고연봉, 
        NVL(MIN(SAL),0)최저연봉,
        COUNT(*)
        FROM EMP
        GROUP BY DEPTNO
        ORDER BY DEPTNO;

INSERT INTO EMP(EMPNO) VALUES(7703);

--========== FROM DUAL
SELECT TRUNC(SYSDATE) FROM DUAL;
--3명 이상 존재하는 직급
SELECT JOB,COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*)>=3;

-- 각 입사년도별 부서별 입사자 수 
SELECT TO_CHAR(HIREDATE,'YYYY') 입사년도,
          DEPTNO,
          COUNT(*)
FROM EMP
WHERE DEPTNO IS NOT NULL
GROUP BY TO_CHAR(HIREDATE,'YYYY'),DEPTNO;

--NVL2(COL,RES1 NO, RES2 YES) NULL 일 때 조건 거는 함수
SELECT NVL2(COMM,'X','O'),COUNT(*)
FROM EMP
GROUP BY NVL2(COMM,'X','O');